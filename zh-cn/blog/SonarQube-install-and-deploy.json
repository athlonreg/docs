{
  "filename": "SonarQube-install-and-deploy.md",
  "__html": "<h1><center>SonarQube安装部署</center></h1>\n<h2>简介</h2>\n<p>SonarQube是一个管理代码质量的开放平台，可以从七个维度检测代码质量：</p>\n<ul>\n<li>复杂度分布（complexity）：代码复杂度过高将难以理解、难以维护；</li>\n<li>重复代码（duplications）：程序中包含大量复制粘度的代码是质量低下的表现；</li>\n<li>单元测试（unit tests）：统计并展示单元测试覆盖率；</li>\n<li>编码规范（coding rules）：通过Findbugs、PMD、CheckStyle等规范代码编写；</li>\n<li>注释（commments）：少了可读性差，多了看起来费劲；</li>\n<li>潜在的Bug（potential bugs）：通过Findbugs、PMD、CheckStyle等检测潜在bug；</li>\n<li>结构与设计（architecture &amp; design）：依赖、耦合等。</li>\n</ul>\n<p>SonarQube 可以集成不同的测试工具（CppCheck、CheckStyle、Junit、CppUnit等），代码分析工具、持续集成工具（Jenkins）、IDE（VisualStudio）。</p>\n<p>Sonar通过对代码质量分析结果数据进行在加工处理，通过量化的方式来度量代码的质量变化，从而可以方便的对工程进行代码质量管理。</p>\n<p>支持语言：JAVA PHP C# C COBOL PL/SQL FLEX等20余种。</p>\n<h2>组成</h2>\n<p>SonarQube平台的组成：</p>\n<ul>\n<li>数据库：存放SonarQube的配置数据、代码质量的快照数据。</li>\n<li>Web服务：用于查看SonarQube的配置数据、代码质量的快照数据。</li>\n<li>分析器：对项目代码进行分析、生成质量结果数据并存入数据库中（分析器有多中，此处选择SonarQube Maven Plugin）。</li>\n</ul>\n<h2>安装环境</h2>\n<h3>安装JDK</h3>\n<p>去官网下载<code>JDK</code>：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html\">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</a></p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/81/1b33b7e9dbe92a1515154d0193194f.jpg\" alt=\"\"></p>\n<p>安装<code>JDK</code>\n将下载得到的<code>jdk-8u161-linux-x64.rpm</code>包保存到<code>Linux</code>主机</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># rpm -ivh jdk-8u161-linux-x64.rpm</span>\n</code></pre>\n<p>设置环境变量，编辑<code>~/.bashrc</code>，</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vim ~/.bashrc</span>\n</code></pre>\n<p>在文件的末尾添加以下行</p>\n<pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_161\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=$JAVA_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$CLASSPATH\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/49/6ac74e90a641e355b29b9c4d17deb9.jpg\" alt=\"\"></p>\n<p>使环境配置生效</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># source ~/.bashrc</span>\n</code></pre>\n<p>测试<code>Java</code>环境，在终端输入：<code>java -version</code>查看是否正常显示版本信息，若显示则安装成功</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/2f/49c7d622b298ae690db3c13754c1b1.jpg\" alt=\"\"></p>\n<p><strong>Note:</strong>\n如果已经预装了openjdk，请先卸载</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># yum list installed | grep openjdk # 根据执行结果进行卸载</span>\n</code></pre>\n<h3>安装MySQL</h3>\n<p>MySQL的Server在CentOS 7上从默认软件列表中被移除了，用MariaDB来代替，所以这导致我们必须要去官网上进行下载，找到链接，用wget打开，然后再安装：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span>\n<span class=\"hljs-comment\"># rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span>\n<span class=\"hljs-comment\"># yum -y install mysql mysql-server mysql-devel</span>\n</code></pre>\n<p>启动MySQL服务</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># systemctl start mysqld</span>\n</code></pre>\n<p>获取安装MySQL时的初始密码并登录MySQL</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># grep 'temporary password' /var/log/mysqld.log</span>\n<span class=\"hljs-comment\"># mysql -u root -p</span>\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/4a/a001ae2bae5a494c7329cd78a477a3.jpg\" alt=\"\"></p>\n<p>登录成功后修改密码，首先修改安全策略为0，然后将密码长度限制修改为1，最后修改密码</p>\n<pre><code class=\"language-mysql\">mysql&gt; set global validate_password_policy=0;\nmysql&gt; set global validate_password_length=1;\nmysql&gt; set password for root@localhost=password('root');\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/a2/0f74ed53f3a426d1fe005228478d8f.jpg\" alt=\"\"></p>\n<p>设置sonar的用户名和数据库</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># adduser sonar</span>\n<span class=\"hljs-comment\"># passwd sonar # 修改sonar用户密码</span>\n<span class=\"hljs-comment\"># su sonar # 切换为sonar用户安装</span>\n</code></pre>\n<pre><code class=\"language-mysql\">mysql&gt; create user 'sonar'@'%' identified by 'sonar';\nmysql&gt; CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;\nmysql&gt; grant all privileges on sonar.* to 'sonar'@'%';\nmysql&gt; flush privileges;\n</code></pre>\n<h3>安装SonarQube</h3>\n<pre><code class=\"language-bash\">$ wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.3.zip\n$ unzip sonarqube-7.3.zip  //若提示unzip命令找不到，用yum -y install unzip安装即可\n$ mv sonarqube-7.3 sonarqube \n$ mv sonarqube /usr/<span class=\"hljs-built_in\">local</span>/\n<span class=\"hljs-comment\"># chown -R sonar:sonar /usr/local/sonarqube</span>\n</code></pre>\n<h2>配置sonar</h2>\n<pre><code class=\"language-bash\">$ vim /usr/<span class=\"hljs-built_in\">local</span>/sonarqube/conf/sonar.properties\n</code></pre>\n<p>如图设置以下选项</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/46/56cfe2c33866ab48ab8c9bdd402acc.jpg\" alt=\"\"></p>\n<h2>启动sonar</h2>\n<pre><code class=\"language-bash\">$ /usr/<span class=\"hljs-built_in\">local</span>/sonarqube/bin/linux-x86-64/sonar.sh start\n</code></pre>\n<p>成功启动后，访问本地 <a href=\"http://IP:9000\">http://IP:9000</a>，SonarQube 初始管理员账号为 admin，默认密码为 admin，登录后可修改密码。</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/25/5b9f14a21cdaf024ea8b3ce551dd7a.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/83/71e7da548917e52b08eb37f385e000.jpg\" alt=\"\"></p>\n<p><strong>Note:</strong>\n如果遇到Sonar启动不起来，查看日志自动关闭的问题，可以采用以下方法解决</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># echo -e \"vm.max_map_count=262144\" &gt;&gt; /etc/sysctl.conf</span>\n<span class=\"hljs-comment\"># sysctl -p</span>\n<span class=\"hljs-comment\"># echo -e \"sonar hard nofile 65536\" &gt;&gt; /etc/security/limits.conf </span>\n<span class=\"hljs-comment\"># echo -e \"sonar soft nofile 65536\" &gt;&gt; /etc/security/limits.conf </span>\n</code></pre>\n<p>然后注销sonar用户重新以sonar身份登录后再次启动:</p>\n<pre><code class=\"language-bash\">$ /usr/<span class=\"hljs-built_in\">local</span>/sonarqube/bin/linux-x86-64/sonar.sh start\n</code></pre>\n<p>插件安装：如果需要下载插件的话，各个版本不一样，如图所示，先点击Administration,再打开Marketplace就可以看到Plugins各种插件了。</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/c6/cef3a943ab5d4347d4af8f3332a196.jpg\" alt=\"\"></p>\n<p>SonarQube 支持分析的语言有很多，像Java、Python、Php、C/C++、C#、HTML、JavaScript、PL/SQL、Objective C等20+语言，当我们需要支持分析什么语言时，只需要去插件中心安装对应语言的插件即可，非常方便，可扩展性强，根据自己的需要去选择插件。</p>\n<h2>实验验证</h2>\n<blockquote>\n<p>本次实验验证以Java工程为例</p>\n</blockquote>\n<h3>安装配置sonar-scanner</h3>\n<ul>\n<li>获取sonar-scanner</li>\n</ul>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># wget https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip</span>\n<span class=\"hljs-comment\"># unzip sonar-scanner-cli-3.2.0.1227-linux.zip</span>\n<span class=\"hljs-comment\"># mv sonar-scanner-3.2.0.1227-linux sonar-scanner</span>\n<span class=\"hljs-comment\"># mv sonar-scanner /usr/local/</span>\n<span class=\"hljs-comment\"># chown -R sonar:sonar sonar-scanner</span>\n</code></pre>\n<ul>\n<li>配置sonar-scanner环境变量</li>\n</ul>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vim ~/.bashrc</span>\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/40/6ea5e9c0aee37c056f4583b32c048d.jpg\" alt=\"\"></p>\n<ul>\n<li>使配置生效</li>\n</ul>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># source ~/.bashrc</span>\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/70/524b2333bbfb3e6a50b77f92eb201d.jpg\" alt=\"\"></p>\n<ul>\n<li>检查环境配置是否成功</li>\n</ul>\n<pre><code class=\"language-bash\">$ sonar-scanner -version\n</code></pre>\n<ul>\n<li>配置sonar-scanner.properties文件</li>\n</ul>\n<pre><code class=\"language-bash\">$ vim /usr/<span class=\"hljs-built_in\">local</span>/sonar-scanner/conf/sonar-scanner.properties\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/46/849b0c5cac635e91e9efcf07ba5fbd.jpg\" alt=\"\"></p>\n<h3>验证过程</h3>\n<ul>\n<li>添加Java Maven测试工程</li>\n</ul>\n<p>编写测试工程</p>\n<ul>\n<li>添加sonar-project.properties文件</li>\n</ul>\n<p>在工程根目录中添加sonar-project.properties文件，格式如下</p>\n<pre><code>sonar.projectKey=com.geovis         //项目的唯一标识\nsonar.projectName=helloworld        //项目的名字\nsonar.projectVersion=1.0            //项目的版本\nsonar.sources=/root/helloworld/src  //项目的源码目录，多目录以英文逗号分隔\n</code></pre>\n<p>例如我的项目结构如下</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/6a/e62e31b74ec65b783f21f4d8cda98e.jpg\" alt=\"\"></p>\n<p>那么此项目配置文件应为</p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/98/4f0aa2e69db09a846cfd6da4a3442f.jpg\" alt=\"\"></p>\n<ul>\n<li>代码质量检查\n设置完后，终端运行<code>sonar-scanner</code>命令，开始项目源代码的分析</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/77/64ffb2ce43fdba046811cce438845c.jpg\" alt=\"\"></p>\n<ul>\n<li>查看结果\n命令运行完成之后，访问http://localhost:9000，输入账号密码即可查看分析结果，如下图</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/b4/92864641223d1537b6f4dfa27a6358.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/athlonreg/BlogImages/master/Images/97/221636aa330d56dea8bb870957f29a.jpg\" alt=\"\"></p>\n<h2>SonarQube 整合 LDAP 和 CAS 单点登录</h2>\n<p><code>SonarQube</code>整合<code>LDAP</code>和<code>CAS</code>单点登录的过程请参考我的另一篇博客<a href=\"https://blog.iamzhl.top/SonarQube-integrate-with-ldap-and-CAS.html\">SonarQube 整合 LDAP 和 CAS 单点登录</a></p>\n",
  "link": "/zh-cn/blog/SonarQube-install-and-deploy.html",
  "meta": {
    "title": "SonarQube安装部署",
    "date": "2018-08-20 16:10:59",
    "categories": "",
    "- Linux": "",
    "- 运维": "",
    "keywords": "",
    "- SonarQube": "",
    "- sonar-scanner": "",
    "description": "SonarQube安装部署以及代码分析实例过程小记",
    "tags": "",
    "photos": "",
    "- https": "//raw.githubusercontent.com/athlonreg/BlogImages/master/Images/b4/92864641223d1537b6f4dfa27a6358.jpg"
  }
}