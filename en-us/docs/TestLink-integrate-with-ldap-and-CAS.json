{
  "filename": "TestLink-integrate-with-ldap-and-CAS.md",
  "__html": "<h2>背景介绍</h2>\n<ul>\n<li>TestLink 版本：2.18</li>\n<li>TestLink URL：<a href=\"http://devops.iamzhl.top/testlink\">http://devops.iamzhl.top/testlink</a></li>\n<li>openLDAP 服务：ldap://devops.iamzhl.top:389</li>\n<li>CAS 服务：<a href=\"http://devops.iamzhl.top:8080/cas\">http://devops.iamzhl.top:8080/cas</a></li>\n</ul>\n<h2>整合 LDAP</h2>\n<h3>修改<code>TestLink</code>配置文件</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/custom_config.inc.php</span>\n</code></pre>\n<blockquote>\n<p>添加<code>LDAP</code>配置文件</p>\n</blockquote>\n<pre><code class=\"language-php\">$tlCfg-&gt;authentication[<span class=\"hljs-string\">'method'</span>] = <span class=\"hljs-string\">'LDAP'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>] = <span class=\"hljs-keyword\">array</span>();\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_server'</span>] = <span class=\"hljs-string\">'devops.iamzhl.top'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_port'</span>] = <span class=\"hljs-string\">'389'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_version'</span>] = <span class=\"hljs-string\">'3'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_root_dn'</span>] = <span class=\"hljs-string\">'dc=iamzhl,dc=top'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_bind_dn'</span>] = <span class=\"hljs-string\">'cn=Manager,dc=iamzhl,dc=top'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_bind_passwd'</span>] = <span class=\"hljs-string\">'123456'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_tls'</span>] = <span class=\"hljs-keyword\">false</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_organization'</span>] = <span class=\"hljs-string\">''</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_uid_field'</span>] = <span class=\"hljs-string\">'uid'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_email_field'</span>] = <span class=\"hljs-string\">'mail'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_firstname_field'</span>] = <span class=\"hljs-string\">'givenname'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'ldap_surname_field'</span>] = <span class=\"hljs-string\">'sn'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap_automatic_user_creation'</span>] = <span class=\"hljs-keyword\">true</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap_email_field'</span>] = <span class=\"hljs-string\">'mail'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap_firstname_field'</span>] = <span class=\"hljs-string\">'givenname'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'ldap_surname_field'</span>] = <span class=\"hljs-string\">'sn'</span>;\n</code></pre>\n<h3>测试</h3>\n<blockquote>\n<p>打开<code>TestLink</code>网址<code>http://devops.iamzhl.top/testlink</code></p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvp6j1abej328s1f8qb2.jpg\" alt=\"\"></p>\n<p>如图，正常跳转到<code>TestLink</code>登录界面，输入<code>LDAP</code>服务器中的用户名密码后点击<code>Log in</code></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvuh6h46uj328s1f8k01.jpg\" alt=\"\"></p>\n<p>如图所示，登陆成功后正常的获取到了用户名，点击左上角的登出按钮，正常退出后跳转到了<code>TestLink</code>的登录界面</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvuj3kqkjj328s1f8gtv.jpg\" alt=\"\"></p>\n<p>至此，<code>TestLink</code>整合<code>LDAP</code>完成。</p>\n<h2>整合<code>CAS</code>单点登录</h2>\n<h3>添加依赖的<code>phpCAS</code>库文件</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># wget https://github.com/apereo/phpCAS/archive/1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># mv 1.3.6.tar.gz phpCAS-1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># tar zxvf phpCAS-1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># chown -R apache:apache phpCAS-1.3.6</span>\n<span class=\"hljs-comment\"># cp -arf phpCAS-1.3.6/source/CAS.php /var/www/html/testlink/lib/functions/</span>\n<span class=\"hljs-comment\"># cp -arf phpCAS-1.3.6/source/CAS /var/www/html/testlink/lib/functions/</span>\n</code></pre>\n<h3>修改<code>TestLink</code>配置文件</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/custom_config.inc.php</span>\n</code></pre>\n<blockquote>\n<p>添加<code>CAS</code>配置项</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">/** CAS server parameters */</span>\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_enable'</span>] = <span class=\"hljs-keyword\">true</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_name'</span>] = <span class=\"hljs-string\">'devops.iamzhl.top'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_port'</span>] = <span class=\"hljs-number\">8080</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_path'</span>] = <span class=\"hljs-string\">'cas'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_debug_enable'</span>] = <span class=\"hljs-keyword\">true</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_debug_file'</span>] = <span class=\"hljs-string\">'/var/logs/testlink/phpCAS.log'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_protocol'</span>] = <span class=\"hljs-string\">'2.0'</span>;\n</code></pre>\n<h3>修改登录界面</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/login.php</span>\n</code></pre>\n<blockquote>\n<p>在<code>switch($args-&gt;action)</code>分支选择语句段内找到<code>case 'loginform'</code>部分，添加<code>CAS</code>的认证</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">switch</span>($args-&gt;action) \n{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'doLogin'</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'ajaxlogin'</span>:\n    doSessionStart(<span class=\"hljs-keyword\">true</span>);\n     \n    <span class=\"hljs-comment\">// When doing ajax login we need to skip control regarding session already open</span>\n    <span class=\"hljs-comment\">// that we use when doing normal login.</span>\n    <span class=\"hljs-comment\">// If we do not proceed this way we will enter an infinite loop</span>\n    $options = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'doSessionExistsCheck'</span> =&gt; ($args-&gt;action==<span class=\"hljs-string\">'doLogin'</span>));\n    $op = doAuthorize($db,$args-&gt;login,$args-&gt;pwd,$options);\n    $doAuthPostProcess = <span class=\"hljs-keyword\">true</span>;\n    $gui-&gt;draw = <span class=\"hljs-keyword\">true</span>;\n  <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'ajaxcheck'</span>:\n    processAjaxCheck($db);\n  <span class=\"hljs-keyword\">break</span>;\n\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'oauth'</span>:\n    <span class=\"hljs-comment\">//If code is empty then break</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">isset</span>($_GET[<span class=\"hljs-string\">'code'</span>])){\n        renderLoginScreen($gui);\n        <span class=\"hljs-keyword\">die</span>();\n    }\n\n    <span class=\"hljs-comment\">//Switch between oauth providers</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">include_once</span>(<span class=\"hljs-string\">'lib/functions/oauth_providers/'</span>.$_GET[<span class=\"hljs-string\">'oauth'</span>].<span class=\"hljs-string\">'.php'</span>)) {\n        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\"Oauth client doesn't exist\"</span>);\n    }\n\n    $oau = config_get(<span class=\"hljs-string\">'OAuthServers'</span>);\n    <span class=\"hljs-keyword\">foreach</span> ($oau <span class=\"hljs-keyword\">as</span> $oprov) {\n      <span class=\"hljs-keyword\">if</span> (strcmp($oprov[<span class=\"hljs-string\">'oauth_name'</span>],$_GET[<span class=\"hljs-string\">'oauth'</span>]) == <span class=\"hljs-number\">0</span>){\n        $oauth_params = $oprov;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n\n    $user_token = oauth_get_token($oauth_params, $_GET[<span class=\"hljs-string\">'code'</span>]);\n    <span class=\"hljs-keyword\">if</span>($user_token-&gt;status[<span class=\"hljs-string\">'status'</span>] == tl::OK) {\n      doSessionStart(<span class=\"hljs-keyword\">true</span>);\n      $op = doAuthorize($db,$user_token-&gt;options-&gt;user,<span class=\"hljs-string\">'oauth'</span>,$user_token-&gt;options);\n      $doAuthPostProcess = <span class=\"hljs-keyword\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        $gui-&gt;note = $user_token-&gt;status[<span class=\"hljs-string\">'msg'</span>];\n        renderLoginScreen($gui);\n        <span class=\"hljs-keyword\">die</span>();\n    }\n  <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'loginform'</span>:\n  \t<span class=\"hljs-comment\">//zhanghl start</span>\n  \t<span class=\"hljs-keyword\">if</span>($authCfg[<span class=\"hljs-string\">'cas_enable'</span>])\n    {    \n       <span class=\"hljs-keyword\">if</span>($authCfg[<span class=\"hljs-string\">'cas_debug_enable'</span>])\n       {\n          phpCAS::setDebug($authCfg[<span class=\"hljs-string\">'cas_debug_file'</span>]);\n       }\n       <span class=\"hljs-comment\">// Initialize phpCAS</span>\n       phpCAS::client($authCfg[<span class=\"hljs-string\">'cas_server_protocol'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_name'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_port'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_path'</span>]);\n       <span class=\"hljs-comment\">// For production use set the CA certificate that is the issuer of the cert</span>\n       <span class=\"hljs-comment\">// on the CAS server and uncomment the line below</span>\n       <span class=\"hljs-comment\">// phpCAS::setCasServerCACert($cas_server_ca_cert_path);</span>\n       \n       <span class=\"hljs-comment\">// For quick testing you can disable SSL validation of the CAS server.</span>\n       <span class=\"hljs-comment\">// THIS SETTING IS NOT RECOMMENDED FOR PRODUCTION.</span>\n       <span class=\"hljs-comment\">// VALIDATING THE CAS SERVER IS CRUCIAL TO THE SECURITY OF THE CAS PROTOCOL!</span>\n       phpCAS::setNoCasServerValidation();\n               \n       <span class=\"hljs-comment\">// Override the validation url for any (ST and PT) CAS 2.0 validation</span>\n       <span class=\"hljs-comment\">//phpCAS::setServerProxyValidateURL('http://devops.iamzhl.top:8080/cas/proxyValidate');</span>\n               \n       <span class=\"hljs-comment\">// Override the validation url for any CAS 1.0 validation</span>\n       <span class=\"hljs-comment\">//phpCAS::setServerServiceValidateURL('http://devops.iamzhl.top:8080/cas/serviceValidate');</span>\n              \n       phpCAS::handleLogoutRequests();\n       phpCAS::forceAuthentication();\n       $options = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'doSessionExistsCheck'</span> =&gt; ($args-&gt;action==<span class=\"hljs-string\">'doLogin'</span>));\n       $op = doCASAuthorize($db,$options);\n       $doAuthPostProcess = <span class=\"hljs-keyword\">true</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n  \t<span class=\"hljs-comment\">//zhanghl end</span>\n\t    $doRenderLoginScreen = <span class=\"hljs-keyword\">true</span>;\n\t    $gui-&gt;draw = <span class=\"hljs-keyword\">true</span>;\n\t    $op = <span class=\"hljs-keyword\">null</span>;\n\n\t    <span class=\"hljs-comment\">// unfortunatelly we use $args-&gt;note in order to do some logic.</span>\n\t    <span class=\"hljs-keyword\">if</span>( ($args-&gt;note=trim($args-&gt;note)) == <span class=\"hljs-string\">\"\"</span> )\n\t    {\n\t      <span class=\"hljs-keyword\">if</span>( $gui-&gt;authCfg[<span class=\"hljs-string\">'SSO_enabled'</span>] )\n\t      {\n\t        doSessionStart(<span class=\"hljs-keyword\">true</span>);\n\t        $doAuthPostProcess = <span class=\"hljs-keyword\">true</span>;\n\t        \n\t        <span class=\"hljs-keyword\">switch</span> ($gui-&gt;authCfg[<span class=\"hljs-string\">'SSO_method'</span>]) \n\t        {\n\t          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'CLIENT_CERTIFICATE'</span>:\n\t            $op = doSSOClientCertificate($db,$_SERVER,$gui-&gt;authCfg);\n\t          <span class=\"hljs-keyword\">break</span>;\n\t          \n\t          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'WEBSERVER_VAR'</span>:\n\t            <span class=\"hljs-comment\">//DEBUGsyslogOnCloud('Trying to execute SSO using SAML');</span>\n\t            $op = doSSOWebServerVar($db,$gui-&gt;authCfg);\n\t          <span class=\"hljs-keyword\">break</span>;\n\t        }\n\t      }\n\t    }\n\t<span class=\"hljs-comment\">//zhanghl start</span>\n\t}\n\t<span class=\"hljs-comment\">//zhanghl end</span>\n  <span class=\"hljs-keyword\">break</span>;\n}\n</code></pre>\n<blockquote>\n<p>在<code>init_gui</code>函数内找到<code>switch($args-&gt;note)</code>分支语句，在<code>expired</code>分支下添加一行重定向调用</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">switch</span>($args-&gt;note) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'expired'</span>:\n      <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">isset</span>($_SESSION)) {\n        session_start();\n      }\n      session_unset();\n      session_destroy();\n      $gui-&gt;note = lang_get(<span class=\"hljs-string\">'session_expired'</span>);\n      $gui-&gt;reqURI = <span class=\"hljs-keyword\">null</span>;\n      <span class=\"hljs-comment\">// 添加重定向调用</span>\n      redirect(TL_BASE_HREF .<span class=\"hljs-string\">\"login.php?destination=\"</span>.$args-&gt;destination);\n    <span class=\"hljs-keyword\">break</span>;\n\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'first'</span>:\n      $gui-&gt;note = lang_get(<span class=\"hljs-string\">'your_first_login'</span>);\n      $gui-&gt;reqURI = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">break</span>;\n\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'lost'</span>:\n      $gui-&gt;note = lang_get(<span class=\"hljs-string\">'passwd_lost'</span>);\n      $gui-&gt;reqURI = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">break</span>;\n\n    <span class=\"hljs-keyword\">default</span>:\n      $gui-&gt;note = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">break</span>;\n  }\n</code></pre>\n<h3>修改登出界面</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># /var/www/html/testlink/logout.php</span>\n</code></pre>\n<blockquote>\n<p>在<code>$authCfg = config_get('authentication');</code>语句之后添加<code>CAS</code>的登出处理</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">if</span>($authCfg[<span class=\"hljs-string\">'cas_enable'</span>])\n{\n   <span class=\"hljs-keyword\">if</span>($authCfg[<span class=\"hljs-string\">'cas_debug_enable'</span>])\n   {\n      phpCAS::setDebug($authCfg[<span class=\"hljs-string\">'cas_debug_file'</span>]);\n   }\n   <span class=\"hljs-comment\">// Initialize phpCAS</span>\n   phpCAS::client($authCfg[<span class=\"hljs-string\">'cas_server_protocol'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_name'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_port'</span>], $authCfg[<span class=\"hljs-string\">'cas_server_path'</span>]);\n   phpCAS::logout();\n}\nredirect(<span class=\"hljs-string\">\"login.php?note=logout\"</span>);\n</code></pre>\n<h3>修改<code>common.php</code>全局引用文件</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/lib/functions/common.php</span>\n</code></pre>\n<blockquote>\n<p>在<code>require_once('tlsmarty.inc.php');</code>引用的前面增加对<code>CAS</code>的引用</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">/** TestLink CAS Authentication Ref */</span>\n$authCfg = config_get(<span class=\"hljs-string\">'authentication'</span>);\n<span class=\"hljs-keyword\">if</span>($authCfg[<span class=\"hljs-string\">'cas_enable'</span>])\n{\n   <span class=\"hljs-comment\">// Load the CAS lib</span>\n   <span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">'CAS.php'</span>;\n}\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvnthnmyaj31p818kn8o.jpg\" alt=\"\"></p>\n<h3>修改认证函数</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/lib/functions/doAuthorize.php</span>\n</code></pre>\n<blockquote>\n<p>在开头<code>require_once</code>语句的后面添加<code>CAS</code>认证函数</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// zhanghl start</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doCASAuthorize</span><span class=\"hljs-params\">(&amp;$db,$options=null)</span>\n</span>{\n   <span class=\"hljs-keyword\">global</span> $g_tlLogger;\n   $result = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'status'</span> =&gt; tl::ERROR, <span class=\"hljs-string\">'msg'</span> =&gt; <span class=\"hljs-keyword\">null</span>);\n   $user = <span class=\"hljs-keyword\">new</span> tlUser();\n   $user-&gt;login = $_SESSION[<span class=\"hljs-string\">'phpCAS'</span>][<span class=\"hljs-string\">'user'</span>];\n   $login_exists = ($user-&gt;readFromDB($db,tlUser::USER_O_SEARCH_BYLOGIN) &gt;= tl::OK);\n\n   <span class=\"hljs-keyword\">if</span>(!$login_exists)\n   {\n      $user = <span class=\"hljs-keyword\">new</span> tlUser();\n      $user-&gt;login = $_SESSION[<span class=\"hljs-string\">'phpCAS'</span>][<span class=\"hljs-string\">'user'</span>];\n      $user-&gt;isActive = <span class=\"hljs-keyword\">true</span>;\n      $user-&gt;authentication = <span class=\"hljs-string\">'LDAP'</span>;  <span class=\"hljs-comment\">// force for auth_does_password_match</span>\n      $user-&gt;setPassword($user-&gt;login);  <span class=\"hljs-comment\">// write password on DB anyway</span>\n   }\n   <span class=\"hljs-comment\">//$user-&gt;emailAddress = $_SESSION['phpCAS']['attributes']['mail'];</span>\n   <span class=\"hljs-comment\">//$user-&gt;firstName = $_SESSION['phpCAS']['attributes']['sn'];</span>\n   <span class=\"hljs-comment\">//$user-&gt;lastName = $_SESSION['phpCAS']['attributes']['givenName'];</span>\n   $doLogin = ($user-&gt;writeToDB($db) == tl::OK);\n\n   <span class=\"hljs-keyword\">if</span>( $doLogin )\n   {\n      <span class=\"hljs-comment\">// Need to do set COOKIE following Mantis model</span>\n      $auth_cookie_name = config_get(<span class=\"hljs-string\">'auth_cookie'</span>);\n      $expireOnBrowserClose=<span class=\"hljs-keyword\">false</span>;\n      setcookie($auth_cookie_name,$user-&gt;getSecurityCookie(),$expireOnBrowserClose,<span class=\"hljs-string\">'/'</span>);\n\n      <span class=\"hljs-comment\">// Disallow two sessions within one browser</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($_SESSION[<span class=\"hljs-string\">'currentUser'</span>]) &amp;&amp; !is_null($_SESSION[<span class=\"hljs-string\">'currentUser'</span>]))\n      {\n         $result[<span class=\"hljs-string\">'msg'</span>] = lang_get(<span class=\"hljs-string\">'login_msg_session_exists1'</span>) .\n            <span class=\"hljs-string\">' &lt;a style=\"color:white;\" href=\"logout.php\"&gt;'</span> .\n            lang_get(<span class=\"hljs-string\">'logout_link'</span>) . <span class=\"hljs-string\">'&lt;/a&gt;'</span> . lang_get(<span class=\"hljs-string\">'login_msg_session_exists2'</span>);\n      }\n      <span class=\"hljs-keyword\">else</span>\n      {\n         <span class=\"hljs-comment\">// Setting user's session information</span>\n         $_SESSION[<span class=\"hljs-string\">'currentUser'</span>] = $user;\n         $_SESSION[<span class=\"hljs-string\">'lastActivity'</span>] = time();\n\n         $g_tlLogger-&gt;endTransaction();\n         $g_tlLogger-&gt;startTransaction();\n         setUserSession($db,$user-&gt;login, $user-&gt;dbID,$user-&gt;globalRoleID,$user-&gt;emailAddress,$user-&gt;locale,<span class=\"hljs-keyword\">null</span>);\n\n         $result[<span class=\"hljs-string\">'status'</span>] = tl::OK;\n      }\n   }\n   <span class=\"hljs-keyword\">return</span> $result;\n}\n<span class=\"hljs-comment\">// zhanghl end</span>\n</code></pre>\n<h3>修改全局配置文件 (可选)</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/config.inc.php</span>\n</code></pre>\n<blockquote>\n<p>增加<code>CAS</code>认证属性</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">/** CAS server properties */</span>\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_enable'</span>] = <span class=\"hljs-keyword\">false</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_name'</span>] = <span class=\"hljs-string\">''</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_port'</span>] = <span class=\"hljs-number\">8080</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_path'</span>] = <span class=\"hljs-string\">'cas'</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_debug_enable'</span>] = <span class=\"hljs-keyword\">true</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_debug_file'</span>] = <span class=\"hljs-string\">''</span>;\n$tlCfg-&gt;authentication[<span class=\"hljs-string\">'cas_server_protocol'</span>] = <span class=\"hljs-string\">''</span>;\n</code></pre>\n<p><em><strong>Note：此选项用以设置默认属性值，主要用来日后查阅，可以不写，<code>/var/www/html/testlink/custom_config.inc.php</code>文件相同的属性配置会覆盖生效。</strong></em></p>\n<h3>修改<code>CAS</code>的<code>Client.php</code>启用<code>http</code>连接(根据个人<code>CAS</code>服务器来定)</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/testlink/lib/functions/CAS/Client.php</span>\n</code></pre>\n<blockquote>\n<p>将如下几个函数中的<code>https</code>改为<code>http</code>即可</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getServerBaseURL</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-comment\">// the URL is build only when needed</span>\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>]) ) {\n        <span class=\"hljs-comment\">// $this-&gt;_server['base_url'] = 'https://' . $this-&gt;_getServerHostname();</span>\n        <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] = <span class=\"hljs-string\">'http://'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;_getServerHostname();\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_getServerPort()!=<span class=\"hljs-number\">443</span>) {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] .= <span class=\"hljs-string\">':'</span>\n                .<span class=\"hljs-keyword\">$this</span>-&gt;_getServerPort();\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] .= <span class=\"hljs-keyword\">$this</span>-&gt;_getServerURI();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>];\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getCallbackURL</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-comment\">// the URL is built when needed only</span>\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_callback_url) ) {\n        $final_uri = <span class=\"hljs-string\">''</span>;\n        <span class=\"hljs-comment\">// remove the ticket if present in the URL</span>\n        <span class=\"hljs-comment\">// $final_uri = 'https://';</span>\n        $final_uri = <span class=\"hljs-string\">'http://'</span>;\n        $final_uri .= <span class=\"hljs-keyword\">$this</span>-&gt;_getClientUrl();\n        $request_uri = $_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>];\n        $request_uri = preg_replace(<span class=\"hljs-string\">'/\\?.*$/'</span>, <span class=\"hljs-string\">''</span>, $request_uri);\n        $final_uri .= $request_uri;\n        <span class=\"hljs-keyword\">$this</span>-&gt;_callback_url = $final_uri;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_callback_url;\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getURL</span><span class=\"hljs-params\">()</span>\n</span>{\n    phpCAS::traceBegin();\n    <span class=\"hljs-comment\">// the URL is built when needed only</span>\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_url) ) {\n        $final_uri = <span class=\"hljs-string\">''</span>;\n        <span class=\"hljs-comment\">// remove the ticket if present in the URL</span>\n        <span class=\"hljs-comment\">// $final_uri = ($this-&gt;_isHttps()) ? 'https' : 'http';</span>\n        $final_uri = (<span class=\"hljs-keyword\">$this</span>-&gt;_isHttps()) ? <span class=\"hljs-string\">'http'</span> : <span class=\"hljs-string\">'http'</span>;\n        $final_uri .= <span class=\"hljs-string\">'://'</span>;\n\n        $final_uri .= <span class=\"hljs-keyword\">$this</span>-&gt;_getClientUrl();\n        $request_uri\t= explode(<span class=\"hljs-string\">'?'</span>, $_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>], <span class=\"hljs-number\">2</span>);\n        $final_uri\t\t.= $request_uri[<span class=\"hljs-number\">0</span>];\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($request_uri[<span class=\"hljs-number\">1</span>]) &amp;&amp; $request_uri[<span class=\"hljs-number\">1</span>]) {\n            $query_string= <span class=\"hljs-keyword\">$this</span>-&gt;_removeParameterFromQueryString(<span class=\"hljs-string\">'ticket'</span>, $request_uri[<span class=\"hljs-number\">1</span>]);\n\n            <span class=\"hljs-comment\">// If the query string still has anything left,</span>\n            <span class=\"hljs-comment\">// append it to the final URI</span>\n            <span class=\"hljs-keyword\">if</span> ($query_string !== <span class=\"hljs-string\">''</span>) {\n                $final_uri\t.= <span class=\"hljs-string\">\"?$query_string\"</span>;\n            }\n        }\n\n        phpCAS::trace(<span class=\"hljs-string\">\"Final URI: $final_uri\"</span>);\n        <span class=\"hljs-keyword\">$this</span>-&gt;setURL($final_uri);\n    }\n    phpCAS::traceEnd(<span class=\"hljs-keyword\">$this</span>-&gt;_url);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_url;\n}\n</code></pre>\n<h3>测试</h3>\n<blockquote>\n<p>新建<code>debug</code>调试目录</p>\n</blockquote>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># mkdir /var/log/testlink</span>\n<span class=\"hljs-comment\"># chown -R apache:apache /var/log/testlink</span>\n</code></pre>\n<blockquote>\n<p>打开<code>TestLink</code>网址<code>http://devops.iamzhl.top/testlink</code></p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvougi1woj32221fcdv4.jpg\" alt=\"\"></p>\n<p>如图所示，正常跳转到<code>CAS</code>的登录界面，地址变成了<code>http://devops.iamzhl.top:8080/cas/login?service=http%3A%2F%2Fdevops.iamzhl.top%2Ftestlink%2Flogin.php</code>，输入用户名密码后点击登录</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006dLY5Ily1fxvuh6h46uj328s1f8k01.jpg\" alt=\"\"></p>\n<p>如图登陆成功后正常获取用户名，点击左上角的登出按钮后，正常退出到<code>CAS</code>登出页面</p>\n<p>![image-20181205173735167](/Users/canvas/Library/Application Support/typora-user-images/image-20181205173735167.png)</p>\n<p>至此，<code>TestLink</code>整合<code>CAS</code>单点登录完成。</p>\n",
  "link": "/en-us/docs/TestLink-integrate-with-ldap-and-CAS.html",
  "meta": {
    "title": "TestLink 整合 LDAP 和 CAS 单点登录",
    "date": "2018-12-04 14:55:56",
    "password": "",
    "categories": "运维",
    "keywords": "",
    "- TestLink": "",
    "- CAS": "",
    "- LDAP": "",
    "description": "TestLink 整合 LDAP 和 CAS 单点登录",
    "tags": "",
    "photos": "",
    "- https": "//raw.githubusercontent.com/athlonreg/BlogImages/master/Images/14/da839143e11bec790a2a77f7247529.jpg"
  }
}