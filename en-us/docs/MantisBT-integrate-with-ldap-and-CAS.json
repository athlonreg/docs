{
  "filename": "MantisBT-integrate-with-ldap-and-CAS.md",
  "__html": "<h2>背景介绍</h2>\n<ul>\n<li>MantisBT 版本：2.18</li>\n<li>Mantis URL：<a href=\"http://devops.iamzhl.top/mantis\">http://devops.iamzhl.top/mantis</a></li>\n<li>openLDAP 服务：ldap://devops.iamzhl.top:389</li>\n<li>CAS 服务：<a href=\"http://devops.iamzhl.top:8080/cas\">http://devops.iamzhl.top:8080/cas</a></li>\n</ul>\n<h2>整合 LDAP</h2>\n<h3>修改<code>MantisBT</code>配置文件</h3>\n<blockquote>\n<p>添加以下配置项</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\"># MantisBT Authentication and LDAP Settings #</span>\n$g_login_method = LDAP;\n$g_reauthentication = ON;\n$g_reauthentication_expiry = TOKEN_EXPIRY_AUTHENTICATED;\n$g_ldap_server = <span class=\"hljs-string\">'ldap://devops.iamzhl.top:389'</span>;\n$g_ldap_root_dn = <span class=\"hljs-string\">'ou=People,dc=iamzhl,dc=top'</span>;\n$g_ldap_protocol_version = <span class=\"hljs-number\">3</span>;\n$g_ldap_organization = <span class=\"hljs-string\">''</span>;\n$g_ldap_bind_dn = <span class=\"hljs-string\">'cn=Manager,dc=iamzhl,dc=top'</span>;\n$g_ldap_bind_passwd = <span class=\"hljs-string\">'123456'</span>;\n$g_ldap_uid_field = <span class=\"hljs-string\">'uid'</span>;\n$g_ldap_realname_field = <span class=\"hljs-string\">'cn'</span>;\n$g_use_ldap_realname = ON;\n$g_use_ldap_email = ON;\n</code></pre>\n<p>打开<code>MantisBT</code>网址，输入用户名密码点击登录</p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/dd/a754582a7218fd2860d31fb543c667.jpg\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/07/158dfd797dce0fa01335dd8d9b5085.jpg\" alt=\"\"></p>\n<p>登陆成功后，正常获取用户名</p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/5d/e2fd0f937861208615ce61fae90423.jpg\" alt=\"\"></p>\n<p>点击右上角的用户名 -&gt; 注销，会正常退出并跳转到登录界面</p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/5e/e198803ba7693b67b5e6c5fc075ab5.jpg\" alt=\"\"></p>\n<p>至此，<code>MantisBT</code>整合<code>LDAP</code>完成。</p>\n<h2>整合 CAS 单点登录</h2>\n<h3>下载<code>phpCAS</code>放到<code>MantisBT</code>下</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># wget https://github.com/apereo/phpCAS/archive/1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># mv 1.3.6.tar.gz phpCAS-1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># tar zxvf phpCAS-1.3.6.tar.gz</span>\n<span class=\"hljs-comment\"># chown -R apache:apache phpCAS-1.3.6</span>\n<span class=\"hljs-comment\"># cp -arf phpCAS-1.3.6 /var/www/html/mantis/phpCAS</span>\n</code></pre>\n<h3>修改<code>MantisBT</code>配置文件</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/config/config_inc.php</span>\n</code></pre>\n<blockquote>\n<p>添加<code>CAS</code>认证需要的变量(请按照自己的<code>LDAP</code>服务器进行修改)</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\"># MantisBT Authentication With CAS Settings #</span>\n$g_login_method = CAS;\n$g_cas_server = <span class=\"hljs-string\">'devops.iamzhl.top'</span>;\n$g_cas_port = <span class=\"hljs-number\">8080</span>;\n$g_cas_uri = <span class=\"hljs-string\">'/cas'</span>;\n$g_cas_validate = <span class=\"hljs-string\">''</span>;\n$g_cas_version = <span class=\"hljs-string\">'2.0'</span>;\n$g_cas_debug = <span class=\"hljs-string\">'/var/www/html/mantis/cas.log'</span>;\n$g_cas_saml_attributes = OFF;\n$g_cas_saml_map = <span class=\"hljs-keyword\">array</span>( <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'mail'</span> =&gt; <span class=\"hljs-string\">''</span> );\n$g_cas_use_ldap = ON;\n$g_ldap_mantis_uid  = <span class=\"hljs-string\">'uid'</span>;\n$g_cas_ldap_update  = OFF;\n$g_cas_ldap_update_fields = <span class=\"hljs-string\">''</span>;\n$g_cas_ldap_update_map    = <span class=\"hljs-string\">''</span>;\n$g_ldap_language_field = <span class=\"hljs-string\">''</span>;\n$g_ldap_language_keys = <span class=\"hljs-string\">''</span>;\n</code></pre>\n<h3>修改登录页面</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/login_page.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 在文件开头的 require_once 部分增加对 phpCAS 的引入</span>\n<span class=\"hljs-keyword\">require_once</span>( <span class=\"hljs-string\">'/var/www/html/mantis/phpCAS/login_cas.php'</span> );\n<span class=\"hljs-comment\">// 在 $f_username 变量的定义之前添加判断语句，当检测到用户已经认证时，跳转到主页</span>\n<span class=\"hljs-keyword\">if</span>( auth_is_user_authenticated() &amp;&amp; !current_user_is_anonymous() ) {\n\tprint_header_redirect( config_get( <span class=\"hljs-string\">'default_home_page'</span> ) );\n}\n</code></pre>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/login.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 在判断变量 f_install 的判断语句之后添加下面的判断语句来判断验证方式，若为 CAS ，则利用 auth_cas_get_name 函数来处理</span>\n<span class=\"hljs-keyword\">if</span> ( CAS == config_get( <span class=\"hljs-string\">'login_method'</span> ) ) {\n\t<span class=\"hljs-comment\"># This will detour to the CAS login page if needed</span>\n\t$f_password = <span class=\"hljs-string\">''</span>;\n\t$f_username = auth_cas_get_name();\n\t<span class=\"hljs-comment\"># User is always authenticated by this point</span>\n}\n</code></pre>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/login_password_page.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 在 $f_username 变量的定义之前添加判断语句，当检测到用户已经认证时，跳转到主页</span>\n<span class=\"hljs-keyword\">if</span>( auth_is_user_authenticated() &amp;&amp; !current_user_is_anonymous() ) {\n\tprint_header_redirect( config_get( <span class=\"hljs-string\">'default_home_page'</span> ) );\n}\n$f_username              = gpc_get_string( <span class=\"hljs-string\">'username'</span>, <span class=\"hljs-string\">''</span> );\n<span class=\"hljs-comment\"># zhanghl start</span>\n<span class=\"hljs-keyword\">if</span>( $f_username == <span class=\"hljs-string\">''</span> ) {\n        $f_username = $staffid;\n}\n<span class=\"hljs-comment\"># zhanghl end</span>\n</code></pre>\n<h3>修改登出页面</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/logout_page.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 在文件开头的 require_once 部分增加对 phpCAS 的引入</span>\n<span class=\"hljs-keyword\">require_once</span>( <span class=\"hljs-string\">'/var/www/html/mantis/phpCAS/login_cas.php'</span> );\n<span class=\"hljs-comment\"># Cache the current logout redirect page as it will be cleared by auth_logout()</span>\n<span class=\"hljs-comment\">//$t_logout_redirect = auth_logout_redirect_page();</span>\n\n<span class=\"hljs-comment\">//auth_logout();</span>\nphpCAS::setDebug();\nphpCAS::setVerbose(<span class=\"hljs-keyword\">true</span>);\nphpCAS::handleLogoutRequests();\nphpCAS::logout();\n\n<span class=\"hljs-comment\">//print_header_redirect( $t_logout_redirect, true, false );</span>\nprint_header_redirect( config_get( <span class=\"hljs-string\">'logout_redirect_page'</span> ), <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span> );\n</code></pre>\n<h3>修改验证逻辑</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/core/authentication_api.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 在变量 g_cache_current_user_id 的定义后面添加以下函数，定义 CAS 的登录逻辑</span>\n<span class=\"hljs-comment\">/**\n* Initialize phpCAS.\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_cas_init</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-comment\"># phpCAS must be installed in the include path</span>\n       <span class=\"hljs-comment\"># or in the Mantis directory.</span>\n       <span class=\"hljs-keyword\">require_once</span>(<span class=\"hljs-string\">'/var/www/html/mantis/phpCAS/CAS.php'</span>);\n\n       <span class=\"hljs-keyword\">static</span> $s_initialized=<span class=\"hljs-keyword\">false</span>;\n\n       <span class=\"hljs-keyword\">if</span> (! $s_initialized ) {\n               phpCAS::setDebug( config_get( <span class=\"hljs-string\">'cas_debug'</span> ) );\n       \t       <span class=\"hljs-comment\">## These should be set in config_inc.php</span>\n               $t_server_version = config_get( <span class=\"hljs-string\">'cas_version'</span> );\n               $t_server_cas_server = config_get( <span class=\"hljs-string\">'cas_server'</span> );\n               $t_server_port = config_get( <span class=\"hljs-string\">'cas_port'</span> );\n               $t_server_uri = config_get( <span class=\"hljs-string\">'cas_uri'</span> );\n               $t_start_session = (boolean)<span class=\"hljs-keyword\">FALSE</span>; <span class=\"hljs-comment\"># Mantis takes care of its own session</span>\n\n               phpCAS::client($t_server_version, $t_server_cas_server, $t_server_port, $t_server_uri, $t_start_session);\n               <span class=\"hljs-keyword\">if</span> ($t_server_version == <span class=\"hljs-string\">\"S1\"</span>)\n                       phpCAS::setServerSamlValidateURL( config_get( <span class=\"hljs-string\">'cas_validate'</span> ) );\n               <span class=\"hljs-keyword\">else</span>\n                       phpCAS::setServerProxyValidateURL( config_get( <span class=\"hljs-string\">'cas_validate'</span> ) );\n               <span class=\"hljs-keyword\">if</span> (method_exists(<span class=\"hljs-string\">'phpCAS'</span>, <span class=\"hljs-string\">'setNoCasServerValidation'</span>)) {\n                       <span class=\"hljs-comment\">// no SSL validation for the CAS server</span>\n                       phpCAS::setNoCasServerValidation();\n               }\n\n               $s_initialized = <span class=\"hljs-keyword\">true</span>;\n       }\n\n}\n\n<span class=\"hljs-comment\">/**\n* Fetches the user's CAS name, authenticating if needed.\n* Can translate CAS login name to Mantis username through LDAP.\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_cas_get_name</span><span class=\"hljs-params\">()</span>\n</span>{\n       <span class=\"hljs-comment\"># Get CAS username from phpCAS</span>\n       auth_cas_init();\n       phpCAS::forceAuthentication();\n       $t_cas_id = phpCAS::getUser();\n       $t_cas_attribs = phpCAS::getAttributes();\n\n       <span class=\"hljs-comment\"># If needed, translate the CAS username through LDAP</span>\n       $t_username = $t_cas_id;\n       <span class=\"hljs-keyword\">if</span> (config_get( <span class=\"hljs-string\">'cas_use_ldap'</span>, <span class=\"hljs-keyword\">false</span> )) {\n               $t_username = auth_cas_ldap_translate( $t_cas_id );\n       }\n       <span class=\"hljs-keyword\">elseif</span> (config_get( <span class=\"hljs-string\">'cas_saml_attributes'</span>, <span class=\"hljs-keyword\">false</span> )) {\n               $t_cas_attribmap = config_get( <span class=\"hljs-string\">'cas_saml_map'</span>, <span class=\"hljs-keyword\">array</span>() );\n               $t_cas_attrib_name = $t_cas_attribs[$t_cas_attribmap[<span class=\"hljs-string\">'name'</span>]];\n               $t_cas_attrib_mail = $t_cas_attribs[$t_cas_attribmap[<span class=\"hljs-string\">'mail'</span>]];\n               <span class=\"hljs-keyword\">if</span> ( user_get_id_by_name($t_cas_id) == <span class=\"hljs-keyword\">false</span> ) {\n                       user_create( $t_cas_id, <span class=\"hljs-string\">''</span>, $t_cas_attrib_mail, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">true</span>, $t_cas_attrib_name );\n\t       }\n       }\n                               \n       <span class=\"hljs-keyword\">return</span> $t_username;\n}\n\n<span class=\"hljs-comment\">/**\n* Takes an ID string, and looks up the LDAP directory to find\n* the matching username for Mantis.\n*\n* Optionally, also update the user information in the Mantis user\n* table.\n*\n* <span class=\"hljs-doctag\">@param</span> $p_cas_id string Typically, the username given by phpCAS.\n* <span class=\"hljs-doctag\">@param</span> $p_update_user bool Whether or not to update user details from LDAP.\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_cas_ldap_translate</span><span class=\"hljs-params\">( $p_cas_id, $p_update_user=<span class=\"hljs-string\">''</span> )</span>\n</span>{\n\n       <span class=\"hljs-comment\"># Please make sure the Mantis CAS and LDAP settings are set in config_inc.php</span>\n\n       $t_ldap_organization    = config_get( <span class=\"hljs-string\">'ldap_organization'</span> );\n       $t_ldap_root_dn         = config_get( <span class=\"hljs-string\">'ldap_root_dn'</span> );\n\n       <span class=\"hljs-comment\"># Required fields in LDAP for CAS</span>\n       $t_ldap_language_field = config_get( <span class=\"hljs-string\">'ldap_language_field'</span>, <span class=\"hljs-string\">''</span> );\n       $t_ldap_uid_field = config_get( <span class=\"hljs-string\">'ldap_uid_field'</span>, <span class=\"hljs-string\">'uid'</span> ) ;\n       $t_ldap_mantis_uid = config_get( <span class=\"hljs-string\">'ldap_mantis_uid'</span>, <span class=\"hljs-string\">'uid'</span> );\n       $t_ldap_required = <span class=\"hljs-keyword\">array</span>( $t_ldap_uid_field, $t_ldap_mantis_uid, <span class=\"hljs-string\">'dn'</span> );\n       <span class=\"hljs-keyword\">if</span> ($t_ldap_language_field) {\n               <span class=\"hljs-comment\">// Add language field to attributes list only if it is configured.</span>\n               $t_ldap_required[] = $t_ldap_language_field;\n       }\n       $t_ldap_required = array_combine( $t_ldap_required, $t_ldap_required );\n\n       <span class=\"hljs-comment\"># User-defined fields to fetch from LDAP...</span>\n       $t_ldap_fields = explode( <span class=\"hljs-string\">','</span>, config_get( <span class=\"hljs-string\">'cas_ldap_update_fields'</span> ) );\n       $t_ldap_fields = array_combine( $t_ldap_fields, $t_ldap_fields );\n       <span class=\"hljs-comment\"># ...which are mapped to Mantis user fields</span>\n       $t_ldap_map = explode( <span class=\"hljs-string\">','</span>, config_get( <span class=\"hljs-string\">'cas_ldap_update_map'</span> ) );\n       $t_ldap_map = array_combine( $t_ldap_map, $t_ldap_map );\n\n       <span class=\"hljs-comment\"># Build LDAP search filter, attribute list from CAS ID</span>\n       $t_search_filter = <span class=\"hljs-string\">\"(&amp;$t_ldap_organization($t_ldap_uid_field=$p_cas_id))\"</span>;\n       $t_search_attrs = array_values($t_ldap_required + $t_ldap_fields);      <span class=\"hljs-comment\"># array union</span>\n\n       <span class=\"hljs-comment\"># Use Mantis ldap_api to connect to LDAP</span>\n       $t_ds = ldap_connect_bind();\n       $t_sr   = ldap_search( $t_ds, $t_ldap_root_dn, $t_search_filter, $t_search_attrs );\n       $t_info = ldap_get_entries( $t_ds, $t_sr );\n       <span class=\"hljs-comment\"># Parse the LDAP entry to find the Mantis username</span>\n       <span class=\"hljs-keyword\">if</span> ( $t_info ) {\n               <span class=\"hljs-comment\"># Get Mantis username</span>\n               $t_username = $t_info[<span class=\"hljs-number\">0</span>][$t_ldap_mantis_uid][<span class=\"hljs-number\">0</span>];\n\n               <span class=\"hljs-comment\"># @@@ The fact that we got here means the user is authenticated</span>\n               <span class=\"hljs-comment\"># @@@ by CAS, and has an LDAP entry.</span>\n               <span class=\"hljs-comment\"># @@@ We might as well update other user details since we are here.</span>\n\n               <span class=\"hljs-comment\"># If no argument given, check settings</span>\n               <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-string\">''</span> == $p_update_user ) {\n                       $p_update_user = config_get( <span class=\"hljs-string\">'cas_ldap_update'</span>, <span class=\"hljs-keyword\">FALSE</span> );\n               }\n               <span class=\"hljs-comment\"># If there's a user record, then update it</span>\n               <span class=\"hljs-keyword\">if</span> ( $p_update_user ) {\n                       <span class=\"hljs-comment\"># Only proceed if the field map arrays are the same length</span>\n                       $t_field_map = array_combine( $t_ldap_fields, $t_ldap_map );\n                       <span class=\"hljs-keyword\">if</span> ($t_field_map) {\n                               <span class=\"hljs-comment\"># If user is new, then we must create their account before updating it</span>\n                               <span class=\"hljs-comment\"># @@@ ( make sure $g_allow_blank_email == ON )</span>\n                               $t_userid = user_get_id_by_name($t_username);\n                               <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">false</span> == $t_userid ) {\n                                       user_create( $t_username, <span class=\"hljs-string\">''</span> );\n                                       <span class=\"hljs-comment\"># @@@ Wow, this is pretty lame</span>\n                                       $t_userid = user_get_id_by_name($t_username);\n                               }\n                               <span class=\"hljs-comment\"># @@@ maybe we can optimize this to write all fields at once?</span>\n                             <span class=\"hljs-keyword\">foreach</span> ( $t_field_map <span class=\"hljs-keyword\">as</span> $key=&gt;$t_userfield ) {\n                                     <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($t_info[<span class=\"hljs-number\">0</span>][$key][<span class=\"hljs-number\">0</span>])) {\n                                             user_set_field( $t_userid, $t_userfield, $t_info[<span class=\"hljs-number\">0</span>][$key][<span class=\"hljs-number\">0</span>] );\n                                     }\n                             }\n                       }\n\n                       <span class=\"hljs-comment\">// Update user's overall language preference</span>\n                       <span class=\"hljs-keyword\">if</span> ($t_ldap_language_field) {\n                               $t_language = $t_info[<span class=\"hljs-number\">0</span>][$t_ldap_language_field][<span class=\"hljs-number\">0</span>];\n                               <span class=\"hljs-comment\">// Map the LDAP language field to Mantis' language field if needed</span>\n                               $t_language_keys = config_get( <span class=\"hljs-string\">'ldap_language_keys'</span>, <span class=\"hljs-string\">''</span>);\n                               $t_language_values = config_get( <span class=\"hljs-string\">'ldap_language_values'</span>, <span class=\"hljs-string\">''</span>);\n                               $t_language_map = array_combine(\n                                       explode(<span class=\"hljs-string\">','</span>, $t_language_keys),\n                                       explode(<span class=\"hljs-string\">','</span>, $t_language_values)\n                               );\n                               <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($t_language_map[$t_language])) {\n                                       $t_language = $t_language_map[$t_language];\n                               }\n                               user_pref_set_pref($t_userid, <span class=\"hljs-string\">'language'</span>, $t_language);\n                       }\n               }\n       }\n       ldap_free_result( $t_sr );\n       ldap_unbind( $t_ds );\n\n       <span class=\"hljs-keyword\">return</span> $t_username;\n}\n\n<span class=\"hljs-comment\">/**\n* Logs out of CAS, redirecting to Mantis on re-login.\n* User should already be logged out of Mantis by the time this is called.\n* <span class=\"hljs-doctag\">@see</span> auth_logout()\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_cas_logout</span><span class=\"hljs-params\">()</span>\n</span>{\n       $t_path = config_get(<span class=\"hljs-string\">'path'</span>);\n       auth_cas_init();\n\n       <span class=\"hljs-keyword\">if</span> (method_Exists(<span class=\"hljs-string\">'phpCAS'</span>, <span class=\"hljs-string\">'logoutWithUrl'</span>)) {\n               phpCAS::logoutWithUrl($t_path);\n       } <span class=\"hljs-keyword\">else</span> {\n               phpCAS::logout($t_path);\n       }\n}\n<span class=\"hljs-comment\">// zhanghl end</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">// 修改 auth_auto_create_user 函数实现 CAS 自动创建用户</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_auto_create_user</span><span class=\"hljs-params\">( $p_username, $p_password )</span> </span>{\n\t$t_login_method = config_get_global( <span class=\"hljs-string\">'login_method'</span> );\n\n\t<span class=\"hljs-comment\">// if( $t_login_method == BASIC_AUTH ) {</span>\n\t<span class=\"hljs-keyword\">if</span> ( in_array( $t_login_method, <span class=\"hljs-keyword\">array</span>( BASIC_AUTH, CAS ) ) ) {\n\t\t<span class=\"hljs-comment\"># attempt to create the user if using BASIC_AUTH or CAS</span>\n\t\t$t_auto_create = <span class=\"hljs-keyword\">true</span>;\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( $t_login_method == LDAP &amp;&amp; ldap_authenticate_by_username( $p_username, $p_password ) ) {\n\t\t$t_auto_create = <span class=\"hljs-keyword\">true</span>;\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t$t_auto_create = <span class=\"hljs-keyword\">false</span>;\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> ( CAS == config_get( <span class=\"hljs-string\">'login_method'</span> ) ) {\n\t\t<span class=\"hljs-comment\"># Redirect to CAS page to logout</span>\n\t\tauth_cas_logout();\n\t}\n\n\t<span class=\"hljs-keyword\">if</span>( $t_auto_create ) {\n\t\t<span class=\"hljs-comment\"># attempt to create the user</span>\n\t\t$t_cookie_string = user_create( $p_username, md5( $p_password ) );\n\t\t<span class=\"hljs-keyword\">if</span>( $t_cookie_string === <span class=\"hljs-keyword\">false</span> ) {\n\t\t\t<span class=\"hljs-comment\"># it didn't work</span>\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t\t}\n\n\t\t<span class=\"hljs-comment\"># ok, we created the user, get the row again</span>\n\t\t<span class=\"hljs-keyword\">return</span> user_get_id_by_name( $p_username );\n\t}\n\n\tsession_clean();\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_attempt_login</span><span class=\"hljs-params\">( $p_username, $p_password, $p_perm_login = false )</span> </span>{\n\t$t_user_id = auth_get_user_id_from_login_name( $p_username );\n\t$t_login_method = config_get( <span class=\"hljs-string\">'login_method'</span> );\n\n\t<span class=\"hljs-keyword\">if</span>( $t_user_id === <span class=\"hljs-keyword\">false</span> ) {\n\t\t<span class=\"hljs-keyword\">if</span> ( in_array( $t_login_method, <span class=\"hljs-keyword\">array</span>( BASIC_AUTH, CAS ) ) ) {\n            <span class=\"hljs-comment\"># attempt to create the user if using BASIC_AUTH or CAS</span>\n            <span class=\"hljs-comment\"># ( note: CAS must have $g_allow_blank_email == ON )</span>\n \t\t\t$t_auto_create = <span class=\"hljs-keyword\">true</span>;\n\t\t}\n\t\t$t_user_id = auth_auto_create_user( $p_username, $p_password );\n\t\t<span class=\"hljs-keyword\">if</span>( $t_user_id === <span class=\"hljs-keyword\">false</span> ) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\"># max. failed login attempts achieved...</span>\n\t<span class=\"hljs-keyword\">if</span>( !user_is_login_request_allowed( $t_user_id ) ) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t}\n\n\t<span class=\"hljs-comment\"># check for anonymous login</span>\n\t<span class=\"hljs-keyword\">if</span>( !user_is_anonymous( $t_user_id ) ) {\n\t\t<span class=\"hljs-comment\"># anonymous login didn't work, so check the password</span>\n\t\t<span class=\"hljs-keyword\">if</span>( !auth_does_password_match( $t_user_id, $p_password ) ) {\n\t\t\tuser_increment_failed_login_count( $t_user_id );\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> auth_login_user( $t_user_id, $p_perm_login );\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_logout</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-keyword\">global</span> $g_cache_current_user_id, $g_cache_cookie_valid;\n\n\t<span class=\"hljs-comment\"># clear cached userid</span>\n\tuser_clear_cache( $g_cache_current_user_id );\n\tcurrent_user_set( <span class=\"hljs-keyword\">null</span> );\n\t$g_cache_cookie_valid = <span class=\"hljs-keyword\">null</span>;\n\n\t<span class=\"hljs-comment\"># clear cookies, if they were set</span>\n\t<span class=\"hljs-keyword\">if</span>( auth_clear_cookies() ) {\n\t\thelper_clear_pref_cookies();\n\t}\n\n\t<span class=\"hljs-keyword\">if</span>( HTTP_AUTH == config_get_global( <span class=\"hljs-string\">'login_method'</span> ) ) {\n\t\tauth_http_set_logout_pending( <span class=\"hljs-keyword\">true</span> );\n\t}\n\n\t<span class=\"hljs-keyword\">elseif</span> ( CAS == config_get( <span class=\"hljs-string\">'login_method'</span> ) ) {\n\t        <span class=\"hljs-comment\"># Redirect to CAS page to logout</span>\n        \tauth_cas_logout();\n\t}\n\n\tsession_clean();\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_automatic_logon_bypass_form</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">switch</span>( config_get( <span class=\"hljs-string\">'login_method'</span> ) ) {\n                <span class=\"hljs-keyword\">case</span> HTTP_AUTH:\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n                <span class=\"hljs-keyword\">case</span> CAS:\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        <span class=\"hljs-comment\">//return config_get_global( 'login_method' ) == HTTP_AUTH;</span>\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_does_password_match</span><span class=\"hljs-params\">( $p_user_id, $p_test_password )</span> </span>{\n\t$t_configured_login_method = config_get_global( <span class=\"hljs-string\">'login_method'</span> );\n\n\t<span class=\"hljs-keyword\">if</span>( LDAP == $t_configured_login_method ) {\n\t\t<span class=\"hljs-keyword\">return</span> ldap_authenticate( $p_user_id, $p_test_password );\n\t}\n\n\t<span class=\"hljs-keyword\">elseif</span> ( CAS == $t_configured_login_method ) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t}\n\n\t<span class=\"hljs-keyword\">if</span>( !auth_can_use_standard_login( $p_user_id ) ) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t}\n\n\t$t_password = user_get_field( $p_user_id, <span class=\"hljs-string\">'password'</span> );\n\t$t_login_methods = <span class=\"hljs-keyword\">array</span>(\n\t\tMD5,\n\t\tCRYPT,\n\t\tPLAIN,\n\t\tBASIC_AUTH,\n\t\tCAS,\n\t);\n\n\t<span class=\"hljs-keyword\">foreach</span>( $t_login_methods <span class=\"hljs-keyword\">as</span> $t_login_method ) {\n\t\t<span class=\"hljs-comment\"># pass the stored password in as the salt</span>\n\t\t<span class=\"hljs-keyword\">if</span>( auth_process_plain_password( $p_test_password, $t_password, $t_login_method ) == $t_password ) {\n\t\t\t<span class=\"hljs-comment\"># Do not support migration to PLAIN, since this would be a crazy thing to do.</span>\n\t\t\t<span class=\"hljs-comment\"># Also if we do, then a user will be able to login by providing the MD5 value</span>\n\t\t\t<span class=\"hljs-comment\"># that is copied from the database.  See #8467 for more details.</span>\n\t\t\t<span class=\"hljs-keyword\">if</span>( ( $t_configured_login_method != PLAIN &amp;&amp; $t_login_method == PLAIN ) ||\n\t\t\t\t( $t_configured_login_method != BASIC_AUTH &amp;&amp; $t_login_method == BASIC_AUTH ) ) {\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>;\n\t\t\t}\n\n\t\t\t<span class=\"hljs-comment\"># Check for migration to another login method and test whether the password was encrypted</span>\n\t\t\t<span class=\"hljs-comment\"># with our previously insecure implementation of the CRYPT method</span>\n\t\t\t<span class=\"hljs-keyword\">if</span>( ( $t_login_method != $t_configured_login_method ) || (( CRYPT == $t_configured_login_method ) &amp;&amp; mb_substr( $t_password, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) == mb_substr( $p_test_password, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> ) ) ) {\n\t\t\t\tuser_set_password( $p_user_id, $p_test_password, <span class=\"hljs-keyword\">true</span> );\n\t\t\t}\n\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n}\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">auth_reauthenticate</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-comment\">//if( !auth_reauthentication_enabled() || BASIC_AUTH == config_get_global( 'login_method' ) || HTTP_AUTH == config_get_global( 'login_method' ) ) {</span>\n\t<span class=\"hljs-keyword\">if</span>( !auth_reauthentication_enabled() || in_array(config_get(<span class=\"hljs-string\">'login_method'</span>), <span class=\"hljs-keyword\">array</span>(BASIC_AUTH, HTTP_AUTH, CAS)) ) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t}\n\n\t$t_auth_token = token_get( TOKEN_AUTHENTICATED );\n\t<span class=\"hljs-keyword\">if</span>( <span class=\"hljs-keyword\">null</span> != $t_auth_token ) {\n\t\ttoken_touch( $t_auth_token[<span class=\"hljs-string\">'id'</span>], auth_reauthentication_expiry() );\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t$t_anon_account = auth_anonymous_account();\n\t\t$t_anon_allowed = auth_anonymous_enabled();\n\n\t\t$t_user_id = auth_get_current_user_id();\n\t\t$t_username = user_get_username( $t_user_id );\n\n\t\t<span class=\"hljs-comment\"># check for anonymous login</span>\n\t\t<span class=\"hljs-keyword\">if</span>( ON == $t_anon_allowed &amp;&amp; $t_anon_account == $t_username ) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t\t}\n\n\t\t$t_request_uri = string_url( $_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>] );\n\n\t\t$t_query_params = http_build_query(\n\t\t\t<span class=\"hljs-keyword\">array</span>(\n\t\t\t\t<span class=\"hljs-string\">'reauthenticate'</span> =&gt; <span class=\"hljs-number\">1</span>,\n\t\t\t\t<span class=\"hljs-string\">'username'</span> =&gt; $t_username,\n\t\t\t\t<span class=\"hljs-string\">'return'</span> =&gt; $t_request_uri,\n\t\t\t),\n\t\t\t<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'&amp;'</span>\n\t\t);\n\n\t\t<span class=\"hljs-comment\"># redirect to login page</span>\n\t\tprint_header_redirect( auth_credential_page( $t_query_params ) );\n\t}\n}\n</code></pre>\n<h3>新建<code>login_cas.php</code>处理拦截利用<code>CAS</code>认证登录</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\">#  vi /var/www/html/mantis/phpCAS/login_cas.php</span>\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">require_once</span>( <span class=\"hljs-string\">'CAS.php'</span> );\ndefine(<span class=\"hljs-string\">'CAS_ENABLE'</span>, <span class=\"hljs-keyword\">true</span>);\n$cas_host = <span class=\"hljs-string\">'devops.iamzhl.top'</span>;\n$cas_context = <span class=\"hljs-string\">'/cas'</span>;\n$cas_port = <span class=\"hljs-number\">8080</span>;\n$cas_real_hosts = <span class=\"hljs-keyword\">array</span> (\n\t<span class=\"hljs-string\">'devops.iamzhl.top'</span>\n);\n\nphpCAS::setDebug();\nphpCAS::setVerbose(<span class=\"hljs-keyword\">true</span>);\nphpCAS::client(CAS_VERSION_2_0, $cas_host, $cas_port, $cas_context);\nphpCAS::setNoCasServerValidation();\nphpCAS::handleLogoutRequests(<span class=\"hljs-keyword\">true</span>, $cas_real_hosts);\nphpCAS::forceAuthentication();\n<span class=\"hljs-meta\">?&gt;</span>\n\n</code></pre>\n<h3>修改<code>CAS</code>的<code>Client.php</code>启用<code>http</code>连接(根据个人<code>CAS</code>服务器来定)</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># vi /var/www/html/mantis/phpCAS/source/CAS/Client.php</span>\n</code></pre>\n<blockquote>\n<p>将如下几个函数中的https改为http即可</p>\n</blockquote>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getServerBaseURL</span><span class=\"hljs-params\">()</span>\n    </span>{\n        <span class=\"hljs-comment\">// the URL is build only when needed</span>\n        <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>]) ) {\n            <span class=\"hljs-comment\">//$this-&gt;_server['base_url'] = 'https://' . $this-&gt;_getServerHostname();</span>\n            <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] = <span class=\"hljs-string\">'http://'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;_getServerHostname();\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_getServerPort()!=<span class=\"hljs-number\">443</span>) {\n                <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] .= <span class=\"hljs-string\">':'</span>\n                .<span class=\"hljs-keyword\">$this</span>-&gt;_getServerPort();\n            }\n            <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>] .= <span class=\"hljs-keyword\">$this</span>-&gt;_getServerURI();\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_server[<span class=\"hljs-string\">'base_url'</span>];\n    }\n</code></pre>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getCallbackURL</span><span class=\"hljs-params\">()</span>\n    </span>{\n        <span class=\"hljs-comment\">// the URL is built when needed only</span>\n        <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_callback_url) ) {\n            $final_uri = <span class=\"hljs-string\">''</span>;\n            <span class=\"hljs-comment\">// remove the ticket if present in the URL</span>\n            <span class=\"hljs-comment\">//$final_uri = 'https://';</span>\n            $final_uri = <span class=\"hljs-string\">'http://'</span>;\n            $final_uri .= <span class=\"hljs-keyword\">$this</span>-&gt;_getClientUrl();\n            $request_uri = $_SERVER[<span class=\"hljs-string\">'REQUEST_URI'</span>];\n            $request_uri = preg_replace(<span class=\"hljs-string\">'/\\?.*$/'</span>, <span class=\"hljs-string\">''</span>, $request_uri);\n            $final_uri .= $request_uri;\n            <span class=\"hljs-keyword\">$this</span>-&gt;_callback_url = $final_uri;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_callback_url;\n    }\n</code></pre>\n<pre><code>public function getURL()\n    {\n        phpCAS::traceBegin();\n        // the URL is built when needed only\n        if ( empty($this-&gt;_url) ) {\n            $final_uri = '';\n            // remove the ticket if present in the URL\n            //$final_uri = ($this-&gt;_isHttps()) ? 'https' : 'http';\n            $final_uri = ($this-&gt;_isHttps()) ? 'http' : 'http';\n            $final_uri .= '://';\n\n            $final_uri .= $this-&gt;_getClientUrl();\n            $request_uri        = explode('?', $_SERVER['REQUEST_URI'], 2);\n            $final_uri          .= $request_uri[0];\n\n            if (isset($request_uri[1]) &amp;&amp; $request_uri[1]) {\n                $query_string= $this-&gt;_removeParameterFromQueryString('ticket', $request_uri[1]);\n\n                // If the query string still has anything left,\n                // append it to the final URI\n                if ($query_string !== '') {\n                    $final_uri  .= &quot;?$query_string&quot;;\n                }\n            }\n\n            phpCAS::trace(&quot;Final URI: $final_uri&quot;);\n            $this-&gt;setURL($final_uri);\n        }\n        phpCAS::traceEnd($this-&gt;_url);\n        return $this-&gt;_url;\n    }\n</code></pre>\n<h3>测试</h3>\n<blockquote>\n<p>新建<code>log</code>目录</p>\n</blockquote>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># mkdir /var/log/mantis</span>\n<span class=\"hljs-comment\"># chown -R apache:apache /var/log/mantis</span>\n</code></pre>\n<p>打开<code>MantisBT</code>网址，正常跳转至<code>CAS</code>登录界面，网址是<code>http://devops.iamzhl.top:8080/cas/login?service=http%3A%2F%2Fdevops.iamzhl.top%2Fmantis%2Flogin_page.php</code></p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/fa/f707556ce41d95b71052d07834f5d8.jpg\" alt=\"\"></p>\n<p>如图，输入用户名密码后点击登录，正常登陆后跳转至<code>MantisBT</code>主页，并且正常获取用户名</p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/49/1365298ec15c90fbf95612a38606ed.jpg\" alt=\"\"></p>\n<p>点击右上角的用户名 -&gt; 注销，会正常退出并跳转到<code>CAS</code>的登出界面</p>\n<p><img src=\"https://gitee.com/athlonreg/picbed/raw/master/Images/85/2d25e40bdf97b6f06dad6239cf3167.jpg\" alt=\"\"></p>\n",
  "link": "/en-us/docs/MantisBT-integrate-with-ldap-and-CAS.html",
  "meta": {
    "title": "MantisBT 整合 LDAP 和 CAS 单点登录",
    "date": "2018-12-03 15:07:11",
    "password": "",
    "categories": "运维",
    "keywords": "",
    "- MantisBT": "",
    "- CAS": "",
    "- LDAP": "",
    "description": "MantisBT 整合 LDAP 和 CAS 单点登录",
    "tags": "",
    "photos": "",
    "- https": "//raw.githubusercontent.com/athlonreg/BlogImages/master/Images/b1/c3e84af9570ae5c9d61d788d482a69.jpg"
  }
}